// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  EmployeeId         String?       @unique
  username           String?       @unique
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  middleName         String?
  lastName           String?
  phoneNumber        String?       @unique
  address            String?
  role               Role          @default(USER)
  gender             String?
  birthday           DateTime?
  bio                String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  lastUsernameChange DateTime?
  createdTopics      Topic[]       @relation("CreatedBy")
  buyerTransactions  Transaction[] @relation("Buyer")
  sellerTransactions Transaction[] @relation("Seller")
  buyerOrder         Order[]       @relation("BuyerOrders")
  sellerOrder        Order[]       @relation("SellerOrders")

  Account         Account[]
  Session         Session[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  notifications   Notification[]
  reportedReports Report[]       @relation("Report")
  adminReports    Report[]       @relation("StaffHandleReport")
  Blog            Blog[]
  ProductPost     ProductPost[]
  Product         Product[]      @relation("CreateProduct")

  @@index([id])
}

// to edit STAFF to EMPLOYEE
enum Role {
  USER
  ADMIN
  EMPLOYEE
}

model EmployeeIdCounter {
  year    Int @id
  counter Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Topic {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?

  @@index([creatorId])
  @@index([name])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  comments Comment[]
  likes    Like[]
  Report   Report[]

  @@index([authorId])
  @@index([topicId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Like {
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())
  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Notification {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model Report {
  id          String     @id @default(cuid())
  type        ReportType
  description String
  createdAt   DateTime   @default(now())

  reporter   User   @relation(fields: [reporterId], references: [id], name: "Report")
  reporterId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  status ReportStatus @default(PENDING)

  //gawing employee
  staff   User?   @relation(fields: [staffId], references: [id], name: "StaffHandleReport")
  staffId String?

  @@index([reporterId])
  @@index([postId])
  @@index([staffId])
}

enum ReportType {
  IRRELEVANT
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  // dagdagan yung report type depende sa mapaguusapan
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
  // dagdagan yung report status depende sa mapaguusapan
}

model Blog {
  id         String          @id @default(cuid())
  title      String
  content    Json
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isApproved ApprovalStatus? @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@index([authorId])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// saka na ecommerce

// dropdown products, to revise
// saka dapat ang transaction mode wala sa products kung hindi sa transaction history?
// maiiba ang model ng product at magkakaroon ng postProduct siguro? kasi magiging create topic ang itsura ng Product
// tas Post Product about lang sa posting talaga ng product
// tas kapag buy now na,

// pano magkaka inventory system, dapat ata may kilo dito 
// tas yun na yung overall kilo nila kasi ang iniinventory ay products eh?

model Product {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Creator   User   @relation("CreateProduct", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  ProductPost ProductPost[]
  Transaction Transaction[]
  Order       Order?        @relation("OrderedProducts", fields: [orderId], references: [id])
  orderId     String?

  @@index([creatorId])
  @@index([orderId])
}

model ProductPost {
  id             String         @id @default(cuid())
  name           String
  description    String
  price          Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  ShippingOption ShippingOption
  kilo           Float

  transactions Transaction[]

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  seller   User    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String
  Order    Order?  @relation("OrderedProductPosts", fields: [orderId], references: [id])
  orderId  String?

  @@index([id])
  @@index([sellerId])
  @@index([productId])
  @@index([orderId])
}

enum ShippingOption {
  PICK_UP
  JNT
}

// New model for Transaction history -emmanuel
model Transaction {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  // Relationships

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  productPost   ProductPost @relation(fields: [productPostId], references: [id], onDelete: Cascade)
  productPostId String

  buyer   User   @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId String

  seller   User   @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  Order   Order?  @relation("OrderTransactions", fields: [orderId], references: [id])
  orderId String?

  @@index([id])
  @@index([productPostId])
  @@index([sellerId])
  @@index([buyerId])
  @@index([productId])
  @@index([orderId])
}

// eto yung parang payment intent pero magcchat lang sila users dapat hahaha
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  shippingAddress String
  paymentMethod   String // GCash, CoD, etc.
  paymentStatus   String // Pending, Completed, Failed, Cancelled, etc.
  orderStatus     String // Pending, Shipped, Delivered, etc.
  // Relationships
  transactions    Transaction[] @relation("OrderTransactions")
  buyer           User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId         String
  seller          User          @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId        String
  product         Product[]     @relation("OrderedProducts")
  productPost     ProductPost[] @relation("OrderedProductPosts")

  @@index([id])
  @@index([buyerId])
  @@index([sellerId])
}
