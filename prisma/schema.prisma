// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  username           String?       @unique
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  middleName         String?
  lastName           String?
  phoneNumber        String?       @unique
  address            String?
  role               Role          @default(USER)
  gender             String?
  birthday           DateTime
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  lastUsernameChange DateTime?
  createdTopics      Topic[]       @relation("CreatedBy")
  buyerTransactions  Transaction[] @relation("Buyer")
  sellerTransactions Transaction[] @relation("Seller")

  Account         Account[]
  Session         Session[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  notifications   Notification[]
  reportedReports Report[]       @relation("Report")
  adminReports    Report[]       @relation("StaffHandleReport")
  Blog            Blog[]
  Product         Product[]

  @@index([id])
}

// to edit STAFF to EMPLOYEE
enum Role {
  USER
  ADMIN
  EMPLOYEE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Topic {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?

  @@index([creatorId])
  @@index([name])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  comments Comment[]
  likes    Like[]
  Report   Report[]

  @@index([authorId])
  @@index([topicId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Notification {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model Report {
  id          String     @id @default(cuid())
  type        ReportType
  description String
  createdAt   DateTime   @default(now())

  reporter   User   @relation(fields: [reporterId], references: [id], name: "Report")
  reporterId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  status ReportStatus @default(PENDING)

  //gawing employee
  staff   User?   @relation(fields: [staffId], references: [id], name: "StaffHandleReport")
  staffId String?

  @@index([reporterId])
  @@index([postId])
  @@index([staffId])
}

enum ReportType {
  IRRELEVANT
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  // dagdagan yung report type depende sa mapaguusapan
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
  // dagdagan yung report status depende sa mapaguusapan
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@index([authorId])
}

// saka na ecommerce

model Product {
  id                String          @id @default(cuid())
  name              String
  description       String
  price             Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  modeOfTransaction TransactionMode
  // quantity  Int 
  //        OR
  // weight    Float
  // Relationships
  transactions      Transaction[]

  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String

  @@index([id])
  @@index([sellerId])
}

enum TransactionMode {
  EXTERNAL
  PICK_UP
}

// New model for Transaction history -emmanuel
model Transaction {
  id         String    @id @default(cuid())
  quantity   Int
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  // Relationships

  product   Product @relation(fields: [productId], references: [id])
  productId String

  buyer   User   @relation("Buyer", fields: [buyerId], references: [id])
  buyerId String

  seller   User   @relation("Seller", fields: [sellerId], references: [id])
  sellerId String

  @@index([id])
  @@index([productId])
  @@index([sellerId])
  @@index([buyerId])
}
