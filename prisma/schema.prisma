// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// railway and ps ->
// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../ERD.svg"
// }

// lagyan ng isBannedFromPosting? same logic sa lastUsernameChange DateTime?? this determines kung gano siya katagal naka ban
// isWarned if may warning tas DateTime
// numberOfViolations Int - add number of times na ban if 3 na then banned ka na
// isBanned boolean? if 3 violations na then permanent true na yung isBanned
model User {
  id                     String           @id @default(cuid()) // string
  name                   String? // nullable | optional 
  EmployeeId             String?          @unique
  username               String?          @unique
  email                  String?          @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  middleName             String?
  lastName               String?
  barangay               String?
  suffix                 String?
  phoneNumber            String?          @unique
  address                String?
  role                   Role             @default(USER)
  specialization         SpecializedRole?
  gender                 String?
  birthday               DateTime?
  blk                    String?
  zip                    String?
  street                 String?
  bio                    String?
  isDisabled             Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  isBanned               Boolean          @default(false)
  numberOfViolations     Int              @default(0)
  isNotificationsEnabled Boolean          @default(true)
  lastUsernameChange     DateTime?
  isBannedFromPosting    DateTime?
  createdTopics          Topic[]          @relation("CreatedBy")
  buyerTransactions      Transaction[]    @relation("Buyer")
  shippingInfo           ShippingInfo[]
  // buyerTransactions   Transaction[] @relation("Buyer")
  // sellerTransactions  Transaction[] @relation("Seller")
  // buyerOrder          Order[]       @relation("BuyerOrders")
  // sellerOrder         Order[]       @relation("SellerOrders")

  cart             Cart[]
  Account          Account[]
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  notifications    Notification[]
  reporter         Report[]                  @relation("Reporter")
  reported         Report[]                  @relation("Reported")
  Blog             Blog[]
  LearningMaterial LearningMaterial[]
  VideoTutorial    VideoTutorial[]
  FAQ              FAQ[]
  // ProductPost     ProductPost[]
  // Product         Product[]      @relation("CreateProduct")
  Product          Product[]
  Article          Article[]
  Community        Community?                @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId      String?
  reactions        Reaction[]
  reply            Reply[]
  Review           Review[]
  ReviewLike       ReviewLike[]
  ReviewDislike    ReviewDislike[]
  ChatRoom         ChatRoom[]
  Message          Message[]
  Activity         EmployeeActivityHistory[]

  @@index([id])
  @@index([communityId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// to edit STAFF to EMPLOYEE
enum Role {
  USER // residents
  ADMIN // urban farm head
  EMPLOYEE // urban farm staff
  SUPER_ADMIN // barangay admin
}

enum SpecializedRole {
  MarketHub
  Informational
}

model EmployeeIdCounter {
  year    Int @id
  counter Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// urban farm head
model Community {
  id               String             @id @default(cuid())
  name             String             @unique // urban farm name
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  carouselImage    CommunityImage[]
  displayPhoto     String?
  // urbanFarmName    String?            @unique
  form             String?
  qrCode           String?
  address          String? // barangay
  email            String?
  contactNumber    String?
  description      String?
  blk              String?
  street           String?
  zip              String?
  isArchived       Boolean            @default(false)
  posts            Post[]
  blogs            Blog[]
  articles         Article[]
  products         Product[]
  User             User[]
  LearningMaterial LearningMaterial[]
  VideoTutorial    VideoTutorial[]
  FAQ              FAQ[]
  Transaction      Transaction[]
  cart             Cart[]
  notifications    Notification[]
  ChatRoom         ChatRoom[]
  messages         Message[]
}

model CommunityImage {
  id          String    @id @default(cuid())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  imageUrl    String
}

model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  image     String?
  content   String
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String

  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?
}

model Topic {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?

  @@index([creatorId])
  @@index([name])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  reports   Int      @default(0)
  isVisible Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  notifications Notification[]
  comments      Comment[]
  likes         Like[]
  Report        Report[]
  reactions     Reaction[]

  Community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?

  @@index([authorId])
  @@index([topicId])
  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  replyOnComent Reply[]
  notifiations  Notification[]

  commentId String @unique

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Reply {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  notifiations Notification[]
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  notifications Notification[]

  @@unique([userId, postId, type])
  @@index([userId])
  @@index([postId])
}

enum ReactionType {
  Check
  Leaf
  XMark
  Laugh
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?

  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String?

  Reaction   Reaction? @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  reactionId String?

  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  Reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String?

  @@index([userId])
  @@index([communityId])
  @@index([transactionId])
}

enum NotificationType {
  PENDING
  APPROVED
  PICK_UP
  COMPLETED
  CANCELLED
  REACT
  COMMENT
  REPLY
}

model Report {
  id        String     @id @default(cuid())
  type      ReportType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade, name: "Reporter")
  reporterId String

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  status ReportStatus @default(PENDING)

  reported   User   @relation(fields: [reportedId], references: [id], onDelete: Cascade, name: "Reported")
  reportedId String

  @@index([reporterId])
  @@index([postId])
  @@index([reportedId])
}

enum ReportType {
  IntellectualProperty
  FraudOrScam
  MockingVictims
  Bullying
  ChildAbuse
  AnimalAbuse
  SexualActivity
  SuicideOrSelfInjury
  HateSpeech
  PromotingDrugUse
  NonConsensualIntimateImages
  SexualExploitation
  Harassment
  UnauthorizedSales
  Violence
  IrrelevantContent //d
  SharingPrivateImages
}

// if rejected yung report make post reports 0 again and delete the existing reports
// if resolved add numberOfViolations of user na rineport + 1
enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

model Blog {
  id         String         @id @default(cuid())
  title      String
  thumbnail  String?
  content    Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  isApproved ApprovalStatus @default(APPROVED)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community               Community                 @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId             String
  EmployeeActivityHistory EmployeeActivityHistory[]

  @@index([authorId])
  @@index([communityId])
}

model LearningMaterial {
  id          String         @id @default(cuid())
  title       String
  thumbnail   String?
  material    String
  description String         @db.VarChar(1000)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isApproved  ApprovalStatus @default(APPROVED)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  EmployeeActivityHistory EmployeeActivityHistory[]

  @@index([authorId])
  @@index([communityId])
}

model VideoTutorial {
  id          String         @id @default(cuid())
  title       String
  thumbnail   String?
  video       String
  description String         @db.VarChar(1000)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isApproved  ApprovalStatus @default(APPROVED)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  EmployeeActivityHistory EmployeeActivityHistory[]

  @@index([authorId])
  @@index([communityId])
}

model FAQ {
  id         String         @id @default(cuid())
  question   String
  answer     Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  isApproved ApprovalStatus @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

model Article {
  id         String          @id @default(cuid())
  title      String
  thumbnail  String?
  content    Json
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isApproved ApprovalStatus? @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
  ARCHIVED
}

model Product {
  id           String @id @default(cuid())
  itemNumber   Int?   @unique @default(autoincrement())
  productImage String @unique
  name         String
  quantity     Float
  priceInKg    Float

  category    String //@unique // kapag sinabing pwede madagdagan gawin nang sariling model to at i-relation nalang. Igaya ang logic katulad sa Topic wherein employees / admin can create multiple categories.
  status      ApprovalStatus @default(APPROVED)
  isFree      Boolean        @default(false)
  isFreeUntil DateTime?

  Stock Stocks[]

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  cart                    Cart[]
  community               Community                 @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId             String
  // orderedVariant OrderedVariant[]
  orderedProducts         OrderedProducts[]
  reviews                 Review[]
  EmployeeActivityHistory EmployeeActivityHistory[]
  // ProductTransaction ProductTransaction[]

  @@index([creatorId])
  @@index([communityId])
}

model Stocks {
  id             String   @id @default(cuid())
  batchNo        String
  numberOfStocks Float
  expiration     DateTime
  harvestedFrom  String
  productId      String?
  product        Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id              String          @id @default(cuid())
  image           String?
  priceRating     Float
  qualityRating   Float
  serviceRating   Float
  freshnessRating Float
  overAllRating   Float
  title           String
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  like            ReviewLike[]
  dislike         ReviewDislike[]
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  transaction     Transaction?    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId   String?
}

model ReviewLike {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
}

model ReviewDislike {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
}

// model Variant {
//   id                String   @id @default(cuid())
//   unitOfMeasurement String
//   variant           Float
//   price             Float
//   EstimatedPieces   Float?
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   orderVariant OrderedVariant[]
//   Cart         Cart[]

//   @@index([productId])
// }

model Transaction {
  id            String            @id @default(cuid())
  referenceId   String            @unique
  amount        Float // order total
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  cancelReason  String?
  cancelType    CancelType?
  paymentMethod String?
  gcashReciept  String?
  paymentStatus String?           @default("Not Paid")

  buyer   User   @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId String

  review          Review[]
  orderedProducts OrderedProducts[]
  seller          Community         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId        String

  // orderedVariant          OrderedVariant[]
  notifications           Notification[]
  EmployeeActivityHistory EmployeeActivityHistory[]

  @@index([buyerId])
  @@index([sellerId])
}

model OrderedProducts {
  id         String   @id @default(cuid())
  priceInKg  Float
  quantity   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  totalPrice Float
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

enum CancelType {
  OutOfStock
  PaymentIssues
  AddressVerification
  SellerError
  NonResponsiveBuyer
  ViolationOfPolicies
  ShippingRestrictions
  ProductDiscontinuation
  SystemErrors
  ChangeOfMind
  FoundBetterDeal
  UnavailabilityOfItem
  DeliveryDelay
  IncorrectItem
  CommunicationIssues
  Other_Reason
}

enum TransactionStatus {
  PENDING
  APPROVED
  PICK_UP
  COMPLETED
  CANCELLED
}

// model OrderedVariant {
//   id        String   @id @default(cuid())
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   quantity  Float
//   variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
//   variantId String

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
//   transactionId String

//   @@index([variantId])
//   @@index([productId])
//   @@index([transactionId])
// }

// model ProductTransaction {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   productId     String
//   transactionId String

//   product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

//   @@index([productId])
//   @@index([transactionId])
// }

model Cart {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  kilograms  Float
  totalPrice Float
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?

  @@index([userId])
  @@index([communityId])
}

model ShippingInfo {
  id          String   @id @default(cuid())
  name        String
  address     String
  blk         String?
  zip         String?
  street      String?
  phoneNumber String
  facebook    String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model EmployeeActivityHistory {
  id               String            @id @default(cuid())
  type             TypeOfActivity
  employeeId       String
  employee         User              @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  transactionId    String?
  transaction      Transaction?      @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  amount           Float?
  status           String?
  buyer            String?
  paymentStatus    String?
  //for inventory
  productName      String?
  typeOfActivity   String?
  productId        String?
  product          Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  learningId       String?
  learningMaterial LearningMaterial? @relation(fields: [learningId], references: [id], onDelete: Cascade)
  blogId           String?
  blog             Blog?             @relation(fields: [blogId], references: [id], onDelete: Cascade)
  videoId          String?
  video            VideoTutorial?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

enum TypeOfActivity {
  DISCUSSION
  MARKETHUB_ORDERS
  MARKETHUB_PRODUCTS
  LEARNINGMATERIALS
}

// saka na ecommerce

// dropdown products, to revise
// saka dapat ang transaction mode wala sa products kung hindi sa transaction history?
// maiiba ang model ng product at magkakaroon ng postProduct siguro? kasi magiging create topic ang itsura ng Product
// tas Post Product about lang sa posting talaga ng product
// tas kapag buy now na,

// pano magkaka inventory system, dapat ata may kilo dito 
// tas yun na yung overall kilo nila kasi ang iniinventory ay products eh?
// add to cart ? ? ? ? ? orderBy asc

// model Product {
//   id        String   @id @default(cuid())
//   name      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   Creator   User   @relation("CreateProduct", fields: [creatorId], references: [id], onDelete: Cascade)
//   creatorId String

//   ProductPost ProductPost[]
//   Transaction Transaction[]
//   Order       Order?        @relation("OrderedProducts", fields: [orderId], references: [id])
//   orderId     String?

//   @@index([creatorId])
//   @@index([orderId])
// }

// model ProductPost {
//   id             String         @id @default(cuid())
//   name           String
//   description    String
//   price          Float
//   createdAt      DateTime       @default(now())
//   updatedAt      DateTime       @updatedAt
//   ShippingOption ShippingOption
//   kilo           Float

//   transactions Transaction[]

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
//   sellerId String

//   Order   Order?  @relation("OrderedProductPosts", fields: [orderId], references: [id])
//   orderId String?

//   @@index([id])
//   @@index([sellerId])
//   @@index([productId])
//   @@index([orderId])
// }

// enum ShippingOption {
//   PICK_UP
//   DELIVERY // GrabPadala, AngkasPadal, Moveit?
// }

// // New model for Transaction history -emmanuel
// model Transaction {
//   id        String    @id @default(cuid())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
//   // Relationships

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   productPost   ProductPost @relation(fields: [productPostId], references: [id], onDelete: Cascade)
//   productPostId String

//   buyer   User   @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
//   buyerId String

//   seller   User   @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)
//   sellerId String

//   Order   Order?  @relation("OrderTransactions", fields: [orderId], references: [id])
//   orderId String?

//   @@index([id])
//   @@index([productPostId])
//   @@index([sellerId])
//   @@index([buyerId])
//   @@index([productId])
//   @@index([orderId])
// }

// // eto yung parang payment intent pero magcchat lang sila users dapat hahaha
// model Order {
//   id              String        @id @default(cuid())
//   orderNumber     String        @unique
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime?     @updatedAt
//   shippingAddress String // 
//   paymentMethod   String // GCash, CoD, etc.
//   paymentStatus   String // Pending, Cancelled, Delivered
//   orderStatus     String // Pending, Shipped, Delivered, etc.
//   // Relationships
//   transactions    Transaction[] @relation("OrderTransactions")
//   buyer           User          @relation("BuyerOrders", fields: [buyerId], references: [id])
//   buyerId         String

//   seller   User   @relation("SellerOrders", fields: [sellerId], references: [id])
//   sellerId String

//   product     Product[]     @relation("OrderedProducts")
//   productPost ProductPost[] @relation("OrderedProductPosts")

//   @@index([id])
//   @@index([buyerId])
//   @@index([sellerId])
// }
