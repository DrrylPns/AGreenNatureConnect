// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// lagyan ng isBannedFromPosting? same logic sa lastUsernameChange DateTime?? this determines kung gano siya katagal naka ban
// isWarned if may warning tas DateTime
// numberOfViolations Int - add number of times na ban if 3 na then banned ka na
// isBanned boolean? if 3 violations na then permanent true na yung isBanned
model User {
  id                  String         @id @default(cuid())
  name                String?
  EmployeeId          String?        @unique
  username            String?        @unique
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  middleName          String?
  lastName            String?
  phoneNumber         String?        @unique
  address             String?
  role                Role           @default(USER)
  gender              String?
  birthday            DateTime?
  bio                 String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isBanned            Boolean        @default(false)
  numberOfViolations  Int            @default(0)
  lastUsernameChange  DateTime?
  isBannedFromPosting DateTime?
  createdTopics       Topic[]        @relation("CreatedBy")
  buyerTransactions   Transaction[]  @relation("Buyer")
  shippingInfo        ShippingInfo[]
  // buyerTransactions   Transaction[] @relation("Buyer")
  // sellerTransactions  Transaction[] @relation("Seller")
  // buyerOrder          Order[]       @relation("BuyerOrders")
  // sellerOrder         Order[]       @relation("SellerOrders")

  cart             Cart[]
  Account          Account[]
  Session          Session[]
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  notifications    Notification[]
  reportedReports  Report[]           @relation("Report")
  adminReports     Report[]           @relation("StaffHandleReport")
  Blog             Blog[]
  LearningMaterial LearningMaterial[]
  VideoTutorial    VideoTutorial[]
  FAQ              FAQ[]
  // ProductPost     ProductPost[]
  // Product         Product[]      @relation("CreateProduct")
  Product          Product[]
  Article          Article[]
  Community        Community?         @relation(fields: [communityId], references: [id])
  communityId      String?
  reactions        Reaction[]

  @@index([id])
  @@index([communityId])
}

// to edit STAFF to EMPLOYEE
enum Role {
  USER
  ADMIN
  EMPLOYEE
}

model EmployeeIdCounter {
  year    Int @id
  counter Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// mga possible idagdag sa community: address, description, etc... consult sa members
model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts            Post[]
  blogs            Blog[]
  articles         Article[]
  products         Product[]
  User             User[]
  LearningMaterial LearningMaterial[]
  VideoTutorial    VideoTutorial[]
  FAQ              FAQ[]
  Transaction      Transaction[]
  cart             Cart[]
}

model Topic {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?

  @@index([creatorId])
  @@index([name])
}

// if # of reports in a post reaches 10 then hide the current post and put it under review.
model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  reports   Int      @default(0)
  isVisible Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  comments  Comment[]
  likes     Like[]
  Report    Report[]
  reactions Reaction[]

  Community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?

  @@index([authorId])
  @@index([topicId])
  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId, type])
  @@index([userId])
  @@index([postId])
}

enum ReactionType {
  Check
  Leaf
  XMark
  Laugh
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Notification {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model Report {
  id          String     @id @default(cuid())
  type        ReportType
  description String     @db.VarChar(1000)
  createdAt   DateTime   @default(now())

  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade, name: "Report")
  reporterId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  status ReportStatus @default(PENDING)

  //gawing employee
  staff   User?   @relation(fields: [staffId], references: [id], onDelete: Cascade, name: "StaffHandleReport")
  staffId String?

  @@index([reporterId])
  @@index([postId])
  @@index([staffId])
}

enum ReportType {
  IRRELEVANT
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  // dagdagan yung report type depende sa mapaguusapan
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
  // dagdagan yung report status depende sa mapaguusapan
}

model Blog {
  id         String         @id @default(cuid())
  title      String
  thumbnail  String?
  content    Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  isApproved ApprovalStatus @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

model LearningMaterial {
  id          String         @id @default(cuid())
  title       String
  thumbnail   String?
  material    String
  description String         @db.VarChar(1000)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isApproved  ApprovalStatus @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

model VideoTutorial {
  id          String         @id @default(cuid())
  title       String
  thumbnail   String?
  video       String
  description String         @db.VarChar(1000)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isApproved  ApprovalStatus @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

model FAQ {
  id         String         @id @default(cuid())
  question   String
  answer     Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  isApproved ApprovalStatus @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

model Article {
  id         String          @id @default(cuid())
  title      String
  thumbnail  String?
  content    Json
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isApproved ApprovalStatus? @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([authorId])
  @@index([communityId])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}

model Product {
  id           String         @id @default(cuid())
  itemNumber   Int?           @unique @default(autoincrement())
  productImage String         @unique
  name         String
  kilograms    Float          @default(0)
  grams        Float          @default(0)
  pounds       Float          @default(0)
  pieces       Float          @default(0)
  packs        Float          @default(0)
  variants     Variant[]
  category     String //@unique // kapag sinabing pwede madagdagan gawin nang sariling model to at i-relation nalang. Igaya ang logic katulad sa Topic wherein employees / admin can create multiple categories.
  status       ApprovalStatus @default(PENDING)
  isFree       Boolean        @default(false)

  creator   User   @relation(fields: [creatorId], references: [EmployeeId], onDelete: Cascade)
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  community      Community        @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId    String
  orderedVariant OrderedVariant[]
  // ProductTransaction ProductTransaction[]

  @@index([creatorId])
  @@index([communityId])
}

model Variant {
  id                String   @id @default(cuid())
  unitOfMeasurement String
  variant           Float
  price             Float
  EstimatedPieces   Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  orderVariant OrderedVariant[]
  Cart         Cart[]

  @@index([productId])
}

model Transaction {
  id          String            @id @default(cuid())
  referenceId String            @unique
  amount      Float // order total
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  cancelReason String?
  cancelType   CancelType?

  buyer   User   @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId String

  seller   Community @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  orderedVariant OrderedVariant[]

  @@index([buyerId])
  @@index([sellerId])
}

enum CancelType {
  LackOfProducts
  EnvironmentalProblem
  others
}

enum TransactionStatus {
  PENDING
  APPROVED
  PICK_UP
  COMPLETED
  CANCELLED
}

model OrderedVariant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String

  @@index([variantId])
  @@index([productId])
  @@index([transactionId])
}

// model ProductTransaction {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   productId     String
//   transactionId String

//   product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

//   @@index([productId])
//   @@index([transactionId])
// }

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?

  @@index([userId])
  @@index([variantId])
  @@index([communityId])
}

model ShippingInfo {
  id          String   @id @default(cuid())
  name        String
  address     String
  phoneNumber String
  facebook    String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

// saka na ecommerce

// dropdown products, to revise
// saka dapat ang transaction mode wala sa products kung hindi sa transaction history?
// maiiba ang model ng product at magkakaroon ng postProduct siguro? kasi magiging create topic ang itsura ng Product
// tas Post Product about lang sa posting talaga ng product
// tas kapag buy now na,

// pano magkaka inventory system, dapat ata may kilo dito 
// tas yun na yung overall kilo nila kasi ang iniinventory ay products eh?
// add to cart ? ? ? ? ? orderBy asc

// model Product {
//   id        String   @id @default(cuid())
//   name      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   Creator   User   @relation("CreateProduct", fields: [creatorId], references: [id], onDelete: Cascade)
//   creatorId String

//   ProductPost ProductPost[]
//   Transaction Transaction[]
//   Order       Order?        @relation("OrderedProducts", fields: [orderId], references: [id])
//   orderId     String?

//   @@index([creatorId])
//   @@index([orderId])
// }

// model ProductPost {
//   id             String         @id @default(cuid())
//   name           String
//   description    String
//   price          Float
//   createdAt      DateTime       @default(now())
//   updatedAt      DateTime       @updatedAt
//   ShippingOption ShippingOption
//   kilo           Float

//   transactions Transaction[]

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
//   sellerId String

//   Order   Order?  @relation("OrderedProductPosts", fields: [orderId], references: [id])
//   orderId String?

//   @@index([id])
//   @@index([sellerId])
//   @@index([productId])
//   @@index([orderId])
// }

// enum ShippingOption {
//   PICK_UP
//   DELIVERY // GrabPadala, AngkasPadal, Moveit?
// }

// // New model for Transaction history -emmanuel
// model Transaction {
//   id        String    @id @default(cuid())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
//   // Relationships

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   productPost   ProductPost @relation(fields: [productPostId], references: [id], onDelete: Cascade)
//   productPostId String

//   buyer   User   @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
//   buyerId String

//   seller   User   @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)
//   sellerId String

//   Order   Order?  @relation("OrderTransactions", fields: [orderId], references: [id])
//   orderId String?

//   @@index([id])
//   @@index([productPostId])
//   @@index([sellerId])
//   @@index([buyerId])
//   @@index([productId])
//   @@index([orderId])
// }

// // eto yung parang payment intent pero magcchat lang sila users dapat hahaha
// model Order {
//   id              String        @id @default(cuid())
//   orderNumber     String        @unique
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime?     @updatedAt
//   shippingAddress String // 
//   paymentMethod   String // GCash, CoD, etc.
//   paymentStatus   String // Pending, Cancelled, Delivered
//   orderStatus     String // Pending, Shipped, Delivered, etc.
//   // Relationships
//   transactions    Transaction[] @relation("OrderTransactions")
//   buyer           User          @relation("BuyerOrders", fields: [buyerId], references: [id])
//   buyerId         String

//   seller   User   @relation("SellerOrders", fields: [sellerId], references: [id])
//   sellerId String

//   product     Product[]     @relation("OrderedProducts")
//   productPost ProductPost[] @relation("OrderedProductPosts")

//   @@index([id])
//   @@index([buyerId])
//   @@index([sellerId])
// }
